% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MPMutils.R
\name{loss}
\alias{loss}
\title{Loss function}
\usage{
loss(p, y, method = "log")
}
\arguments{
\item{p}{A vector of predicted outcome values.}

\item{y}{A vector of observed outcome values.}

\item{method}{Loss function definition. One between "log" (default) 
and "sqerror".}

\item{...}{Currently ignored.}
}
\value{
A list of 2 objects:
\enumerate{
\item "loss", loss function values;
\item "cost", cost function value.
}
}
\description{
Compute the loss function needed for prediction error 
   estimation.
}
\details{
The subject-level prediction error, calculated through the 
   \code{\link[morphonode]{topsim}} function, is strongly correlated 
   with the loss function values. However, while the former can be 
   only calculated for the entire training set, the latter can be 
   computed for the new input profile(s). Therefore, the prediction 
   error (E) for the input is calculated as: 
   E = b0 + b*L, where L is the loss function value.
   L can be currently defined as either "log": 
   L = -1*(y*log(p) + (1 - y)*log(1 - p)) (default), or 
   "sqerror": L = (p - y)^2.
   Additionally, the cost is calculated as either average loss sum(L)/n 
   or root mean squared error sqrt(sum(L)/n), for "log" and "sqerror", 
   respectively.
}
\examples{

# RBM prediction vs. reality over the simulated dataset

p <- predict(mpm.rbm$fit, dichotomize(mpm.us[2:15], asFactor = TRUE),
             type = "response")

L <- loss(p, mpm.us$y)

print(quantile(L$loss))

print(L$cost)

# Overall RBM performances

y.hat <- ifelse(p > 0.5, 1, 0)
P <- performance(obs = mpm.us$y, pred = y.hat)

print(P)

}
\seealso{
\code{\link[morphonode]{us.predict}}, 
   \code{\link[morphonode]{brier}}
}
\author{
Fernando Palluzzi \email{fernando.palluzzi@gmail.com}
}
